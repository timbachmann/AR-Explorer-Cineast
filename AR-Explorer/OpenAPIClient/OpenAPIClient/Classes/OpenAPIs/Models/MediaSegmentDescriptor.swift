//
// MediaSegmentDescriptor.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct MediaSegmentDescriptor: Codable, JSONEncodable, Hashable {

    public var segmentId: String?
    public var objectId: String?
    public var start: Int?
    public var end: Int?
    public var startabs: Float?
    public var endabs: Float?
    public var count: Int?
    public var sequenceNumber: Int?

    public init(segmentId: String? = nil, objectId: String? = nil, start: Int? = nil, end: Int? = nil, startabs: Float? = nil, endabs: Float? = nil, count: Int? = nil, sequenceNumber: Int? = nil) {
        self.segmentId = segmentId
        self.objectId = objectId
        self.start = start
        self.end = end
        self.startabs = startabs
        self.endabs = endabs
        self.count = count
        self.sequenceNumber = sequenceNumber
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case segmentId
        case objectId
        case start
        case end
        case startabs
        case endabs
        case count
        case sequenceNumber
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(segmentId, forKey: .segmentId)
        try container.encodeIfPresent(objectId, forKey: .objectId)
        try container.encodeIfPresent(start, forKey: .start)
        try container.encodeIfPresent(end, forKey: .end)
        try container.encodeIfPresent(startabs, forKey: .startabs)
        try container.encodeIfPresent(endabs, forKey: .endabs)
        try container.encodeIfPresent(count, forKey: .count)
        try container.encodeIfPresent(sequenceNumber, forKey: .sequenceNumber)
    }
}


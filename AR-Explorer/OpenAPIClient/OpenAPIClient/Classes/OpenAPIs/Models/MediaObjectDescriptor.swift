//
// MediaObjectDescriptor.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct MediaObjectDescriptor: Codable, JSONEncodable, Hashable {

    public enum Mediatype: String, Codable, CaseIterable {
        case video = "VIDEO"
        case image = "IMAGE"
        case audio = "AUDIO"
        case model3d = "MODEL3D"
        case imageSequence = "IMAGE_SEQUENCE"
        case unknown = "UNKNOWN"
    }
    public var objectid: String?
    public var name: String?
    public var path: String?
    public var mediatype: Mediatype?
    public var exists: Bool?
    public var contentURL: String?

    public init(objectid: String? = nil, name: String? = nil, path: String? = nil, mediatype: Mediatype? = nil, exists: Bool? = nil, contentURL: String? = nil) {
        self.objectid = objectid
        self.name = name
        self.path = path
        self.mediatype = mediatype
        self.exists = exists
        self.contentURL = contentURL
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case objectid
        case name
        case path
        case mediatype
        case exists
        case contentURL
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(objectid, forKey: .objectid)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(path, forKey: .path)
        try container.encodeIfPresent(mediatype, forKey: .mediatype)
        try container.encodeIfPresent(exists, forKey: .exists)
        try container.encodeIfPresent(contentURL, forKey: .contentURL)
    }
}


//
// TagAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class TagAPI {

    /**
     Find all tags
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func findAllTags(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: TagsQueryResult?, _ error: Error?) -> Void)) -> RequestTask {
        return findAllTagsWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Find all tags
     - GET /api/v1/find/tags/all
     - returns: RequestBuilder<TagsQueryResult> 
     */
    open class func findAllTagsWithRequestBuilder() -> RequestBuilder<TagsQueryResult> {
        let localVariablePath = "/api/v1/find/tags/all"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TagsQueryResult>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Find all tags specified by attribute value
     
     - parameter attribute: (path) The attribute to filter on. One of: id, name, matchingname 
     - parameter value: (path) The value of the attribute to filter 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func findTagsBy(attribute: String, value: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: TagsQueryResult?, _ error: Error?) -> Void)) -> RequestTask {
        return findTagsByWithRequestBuilder(attribute: attribute, value: value).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Find all tags specified by attribute value
     - GET /api/v1/find/tags/by/{attribute}/{value}
     - Find all tags by attributes id, name or matchingname and filter value
     - parameter attribute: (path) The attribute to filter on. One of: id, name, matchingname 
     - parameter value: (path) The value of the attribute to filter 
     - returns: RequestBuilder<TagsQueryResult> 
     */
    open class func findTagsByWithRequestBuilder(attribute: String, value: String) -> RequestBuilder<TagsQueryResult> {
        var localVariablePath = "/api/v1/find/tags/by/{attribute}/{value}"
        let attributePreEscape = "\(APIHelper.mapValueToPathItem(attribute))"
        let attributePostEscape = attributePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{attribute}", with: attributePostEscape, options: .literal, range: nil)
        let valuePreEscape = "\(APIHelper.mapValueToPathItem(value))"
        let valuePostEscape = valuePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{value}", with: valuePostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TagsQueryResult>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Find all tags by ids
     
     - parameter idList: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func findTagsById(idList: IdList? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: TagsQueryResult?, _ error: Error?) -> Void)) -> RequestTask {
        return findTagsByIdWithRequestBuilder(idList: idList).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Find all tags by ids
     - POST /api/v1/tags/by/id
     - parameter idList: (body)  (optional)
     - returns: RequestBuilder<TagsQueryResult> 
     */
    open class func findTagsByIdWithRequestBuilder(idList: IdList? = nil) -> RequestBuilder<TagsQueryResult> {
        let localVariablePath = "/api/v1/tags/by/id"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: idList)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TagsQueryResult>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}

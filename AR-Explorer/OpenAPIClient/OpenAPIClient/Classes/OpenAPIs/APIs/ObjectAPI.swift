//
// ObjectAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class ObjectAPI {

    /**
     Find all objects for a certain type
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func findObjectsAll(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: MediaObjectQueryResult?, _ error: Error?) -> Void)) -> RequestTask {
        return findObjectsAllWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Find all objects for a certain type
     - GET /api/v1/find/objects/all
     - Find all objects for a certain type
     - returns: RequestBuilder<MediaObjectQueryResult> 
     */
    open class func findObjectsAllWithRequestBuilder() -> RequestBuilder<MediaObjectQueryResult> {
        let localVariablePath = "/api/v1/find/objects/all"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MediaObjectQueryResult>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Find object by specified attribute value. I.e by id, name or path
     
     - parameter attribute: (path) The attribute type of the value. One of: id, name, path 
     - parameter value: (path) The actual value that you want to filter for 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func findObjectsByAttribute(attribute: String, value: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: MediaObjectQueryResult?, _ error: Error?) -> Void)) -> RequestTask {
        return findObjectsByAttributeWithRequestBuilder(attribute: attribute, value: value).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Find object by specified attribute value. I.e by id, name or path
     - GET /api/v1/find/object/by/{attribute}/{value}
     - Find object by specified attribute value. I.e by id, name or path
     - parameter attribute: (path) The attribute type of the value. One of: id, name, path 
     - parameter value: (path) The actual value that you want to filter for 
     - returns: RequestBuilder<MediaObjectQueryResult> 
     */
    open class func findObjectsByAttributeWithRequestBuilder(attribute: String, value: String) -> RequestBuilder<MediaObjectQueryResult> {
        var localVariablePath = "/api/v1/find/object/by/{attribute}/{value}"
        let attributePreEscape = "\(APIHelper.mapValueToPathItem(attribute))"
        let attributePostEscape = attributePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{attribute}", with: attributePostEscape, options: .literal, range: nil)
        let valuePreEscape = "\(APIHelper.mapValueToPathItem(value))"
        let valuePostEscape = valuePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{value}", with: valuePostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MediaObjectQueryResult>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Find objects by id
     
     - parameter idList: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func findObjectsByIdBatched(idList: IdList? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: MediaObjectQueryResult?, _ error: Error?) -> Void)) -> RequestTask {
        return findObjectsByIdBatchedWithRequestBuilder(idList: idList).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Find objects by id
     - POST /api/v1/find/object/by/id
     - Find objects by id
     - parameter idList: (body)  (optional)
     - returns: RequestBuilder<MediaObjectQueryResult> 
     */
    open class func findObjectsByIdBatchedWithRequestBuilder(idList: IdList? = nil) -> RequestBuilder<MediaObjectQueryResult> {
        let localVariablePath = "/api/v1/find/object/by/id"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: idList)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MediaObjectQueryResult>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Get a fixed amount of objects from the sorted list
     
     - parameter skip: (path) How many objects should be skipped 
     - parameter limit: (path) How many object at most should be fetched 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func findObjectsPagination(skip: Int, limit: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: MediaObjectQueryResult?, _ error: Error?) -> Void)) -> RequestTask {
        return findObjectsPaginationWithRequestBuilder(skip: skip, limit: limit).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a fixed amount of objects from the sorted list
     - GET /api/v1/find/object/all/{skip}/{limit}
     - Equivalent to calling SELECT * FROM multimediaobject ORDER BY objectid ASC LIMIT limit SKIP skip. Mostly used for pagination when wanting to retrieve all objects
     - parameter skip: (path) How many objects should be skipped 
     - parameter limit: (path) How many object at most should be fetched 
     - returns: RequestBuilder<MediaObjectQueryResult> 
     */
    open class func findObjectsPaginationWithRequestBuilder(skip: Int, limit: Int) -> RequestBuilder<MediaObjectQueryResult> {
        var localVariablePath = "/api/v1/find/object/all/{skip}/{limit}"
        let skipPreEscape = "\(APIHelper.mapValueToPathItem(skip))"
        let skipPostEscape = skipPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{skip}", with: skipPostEscape, options: .literal, range: nil)
        let limitPreEscape = "\(APIHelper.mapValueToPathItem(limit))"
        let limitPostEscape = limitPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{limit}", with: limitPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MediaObjectQueryResult>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}

//
// MiscAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class MiscAPI {

    /**
     Count objects
     
     - parameter table: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func countRows(table: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: IntegerMessage?, _ error: Error?) -> Void)) -> RequestTask {
        return countRowsWithRequestBuilder(table: table).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Count objects
     - GET /api/v1/count/table/{table}
     - Equivalent to calling SELECT count(*) FROM table. Used to determined #pages for pagination in a frontend or statistical purposes
     - parameter table: (path)  
     - returns: RequestBuilder<IntegerMessage> 
     */
    open class func countRowsWithRequestBuilder(table: String) -> RequestBuilder<IntegerMessage> {
        var localVariablePath = "/api/v1/count/table/{table}"
        let tablePreEscape = "\(APIHelper.mapValueToPathItem(table))"
        let tablePostEscape = tablePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{table}", with: tablePostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<IntegerMessage>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Find all distinct elements of a given column
     
     - parameter columnSpecification: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func findDistinctElementsByColumn(columnSpecification: ColumnSpecification? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: DistinctElementsResult?, _ error: Error?) -> Void)) -> RequestTask {
        return findDistinctElementsByColumnWithRequestBuilder(columnSpecification: columnSpecification).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Find all distinct elements of a given column
     - POST /api/v1/find/boolean/column/distinct
     - Find all distinct elements of a given column. Please note that this operation does cache results.
     - parameter columnSpecification: (body)  (optional)
     - returns: RequestBuilder<DistinctElementsResult> 
     */
    open class func findDistinctElementsByColumnWithRequestBuilder(columnSpecification: ColumnSpecification? = nil) -> RequestBuilder<DistinctElementsResult> {
        let localVariablePath = "/api/v1/find/boolean/column/distinct"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: columnSpecification)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DistinctElementsResult>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Find all elements of given columns
     
     - parameter selectSpecification: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func selectFromTable(selectSpecification: SelectSpecification? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: SelectResult?, _ error: Error?) -> Void)) -> RequestTask {
        return selectFromTableWithRequestBuilder(selectSpecification: selectSpecification).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Find all elements of given columns
     - POST /api/v1/find/boolean/table/select
     - Find all elements of given columns
     - parameter selectSpecification: (body)  (optional)
     - returns: RequestBuilder<SelectResult> 
     */
    open class func selectFromTableWithRequestBuilder(selectSpecification: SelectSpecification? = nil) -> RequestBuilder<SelectResult> {
        let localVariablePath = "/api/v1/find/boolean/table/select"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: selectSpecification)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SelectResult>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}
